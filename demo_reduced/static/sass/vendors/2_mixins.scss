// Responsive breakpoint control
@mixin smaller-than($size) {
    @media screen and (max-width: $size) { @content; }
}
@mixin larger-than($size) {
    @media screen and (min-width: $size) { @content; }
}
@mixin between($min, $max) {
  @media screen and (min-width: $min) and (max-width: $max) { @content; }
}

// Padding shorthand using logical operators to better support RTL.
@mixin padding($t, $r, $b, $l) {
  padding-block-start: $t;
  padding-block-end: $b;
  padding-inline-start: $l;
  padding-inline-end: $r;
}

// Margin shorthand using logical operators to better support RTL.
@mixin margin($t, $r, $b, $l) {
  margin-block-start: $t;
  margin-block-end: $b;
  margin-inline-start: $l;
  margin-inline-end: $r;
}

// Create a RTL specific style block.
// Mostly used as a patch until browser support improves for logical properties.
@mixin rtl() {
  html[dir=rtl] & {
    @content;
  }
}

// Define a property for both light and dark mode
@mixin lightDark($prop, $light, $dark, $important: true) {
  #{$prop}: if($important, $light !important, $light);
  html.dark-mode & {
    #{$prop}: if($important, $dark !important, $dark);
  }
}

@mixin whenDark {
    html.dark-mode & {
      @content;
    }
}

// Here we generate spacing utility classes for our sizes for all box sides and axis.
// These will output to classes like .px-m (Padding on x-axis, medium size) or .mr-l (Margin right, large size)

@mixin spacing($prop, $propLetter) {
  @each $sizeLetter, $size in $spacing {
    .#{$propLetter}-#{$sizeLetter} {
      #{$prop}: $size !important;
    }
    .#{$propLetter}x-#{$sizeLetter} {
      #{$prop}-inline-start: $size !important;
      #{$prop}-inline-end: $size !important;
    }
    .#{$propLetter}y-#{$sizeLetter} {
      #{$prop}-top: $size !important;
      #{$prop}-bottom: $size !important;
    }
    .#{$propLetter}t-#{$sizeLetter} {
      #{$prop}-top: $size !important;
    }
    .#{$propLetter}r-#{$sizeLetter} {
      #{$prop}-right: $size !important;
    }
    .#{$propLetter}b-#{$sizeLetter} {
      #{$prop}-bottom: $size !important;
    }
    .#{$propLetter}l-#{$sizeLetter} {
      #{$prop}-left: $size !important;
    }
  }
}
@include spacing('margin', 'm');
@include spacing('padding', 'p');

.toHide {
  visibility: hidden;
}
.dispNone {
  display: none !important;
}
